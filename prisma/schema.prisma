generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id                         String                @id @default(cuid())
  name                       String?
  email                      String?               @unique
  emailVerified              DateTime?             @map("email_verified")
  image                      String?
  password                   String?
  role                       UserRole?
  isActive                   Boolean               @default(true)
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  firstName                  String?
  lastName                   String?
  accounts                   Account[]
  announcements              Announcement[]
  answerVotes                AnswerVote[]
  answers                    Answer[]
  chatParticipants           ChatParticipant[]
  communicationVotes         CommunicationVote[]
  communications             CourseCommunication[]
  departmentAdmin            DepartmentAdmin?
  emailNotificationsReceived EmailNotification[]   @relation("EmailNotificationsReceived")
  emailNotificationsSent     EmailNotification[]   @relation("EmailNotificationsSent")
  feedbackForms              FeedbackForm[]
  forumCategories            ForumCategory[]
  forumPosts                 ForumPost[]
  forumThreads               ForumThread[]
  knowledgeArticles          KnowledgeArticle[]
  lecturer                   Lecturer?
  chatMessages               LiveChatMessage[]     @relation("ChatMessages")
  agentChatSessions          LiveChatSession[]     @relation("AgentChatSessions")
  chatSessions               LiveChatSession[]     @relation("ChatSessions")
  loginLogs                  LoginLog[]
  messages                   Message[]
  passwordResets             PasswordReset[]
  questionVotes              QuestionVote[]
  questions                  Question[]
  schoolAdmin                SchoolAdmin?
  senateAdmin                SenateAdmin?
  sessions                   Session[]
  student                    Student?
  supportResponses           SupportResponse[]
  assignedTickets            SupportTicket[]       @relation("AssignedTickets")
  supportTickets             SupportTicket[]
  systemLogs                 SystemLog[]
  userSessions               UserSession[]

  @@map("users")
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String
  loginAt   DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_logs")
}

model School {
  id              String          @id @default(cuid())
  name            String          @unique
  code            String          @unique
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  announcements   Announcement[]
  courses         Course[]
  departments     Department[]
  forumCategories ForumCategory[]
  admins          SchoolAdmin[]
  stats           SchoolStats[]

  @@map("schools")
}

model Department {
  id                 String               @id @default(cuid())
  name               String
  code               String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  schoolId           String
  announcements      Announcement[]
  courseAvailability CourseAvailability[]
  courses            Course[]
  admins             DepartmentAdmin[]
  departmentCourses  DepartmentCourse[]
  school             School               @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  forumCategories    ForumCategory[]
  lecturers          Lecturer[]
  students           Student[]

  @@unique([name, schoolId])
  @@map("departments")
}

model Student {
  id                      String                   @id @default(cuid())
  userId                  String                   @unique
  name                    String
  matricNumber            String                   @unique
  level                   StudentLevel
  departmentId            String
  profileCompleted        Boolean                  @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  firstName               String?
  lastName                String?
  address                 String?
  emergencyContact        String?
  phone                   String?
  assessments             Assessment[]
  assignmentSubmissions   AssignmentSubmission[]
  courseEvaluations       CourseEvaluation[]
  courseRegistrations     CourseRegistration[]
  enrollments             Enrollment[]
  feedbackResponses       FeedbackResponse[]
  feedbacks               Feedback[]
  notifications           Notification[]
  quizAttempts            QuizAttempt[]
  results                 Result[]
  department              Department               @relation(fields: [departmentId], references: [id])
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  virtualClassAttendances VirtualClassAttendance[]

  @@map("students")
}

model Lecturer {
  id                String             @id @default(cuid())
  userId            String             @unique
  name              String
  departmentId      String
  profileCompleted  Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  firstName         String?
  lastName          String?
  staffId           String?            @unique
  title             String?
  assessments       Assessment[]
  assignments       Assignment[]
  courseAssignments CourseAssignment[]
  courseEvaluations CourseEvaluation[]
  feedbackForms     FeedbackForm[]
  department        Department         @relation(fields: [departmentId], references: [id])
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications     Notification[]
  quizzes           Quiz[]
  virtualClasses    VirtualClass[]

  @@map("lecturers")
}

model DepartmentAdmin {
  id                  String               @id @default(cuid())
  userId              String               @unique
  name                String
  departmentId        String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  adminId             String?              @unique
  firstName           String?
  lastName            String?
  title               String?
  courseAssignments   CourseAssignment[]
  courseAvailability  CourseAvailability[]
  courseRegistrations CourseRegistration[] @relation("ReviewedRegistrations")
  department          Department           @relation(fields: [departmentId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  DepartmentStats     DepartmentStats[]
  resultApprovals     ResultApproval[]
  schoolStats         SchoolStats[]

  @@map("department_admins")
}

model SchoolAdmin {
  id                  String               @id @default(cuid())
  userId              String               @unique
  name                String
  schoolId            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  adminId             String?              @unique
  firstName           String?
  lastName            String?
  title               String?
  courseRegistrations CourseRegistration[]
  resultApprovals     ResultApproval[]
  school              School               @relation(fields: [schoolId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  SchoolStats         SchoolStats[]

  @@map("school_admins")
}

model SenateAdmin {
  id              String           @id @default(cuid())
  userId          String           @unique
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  adminId         String?          @unique
  firstName       String?
  lastName        String?
  title           String?
  resultApprovals ResultApproval[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  systemStats     SystemStats[]

  @@map("senate_admins")
}

model Course {
  id                 String                @id @default(cuid())
  title              String
  code               String                @unique
  creditUnit         Int
  description        String?
  type               CourseType
  level              StudentLevel
  semester           SemesterType
  isActive           Boolean               @default(true)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  departmentId       String?
  schoolId           String?
  announcements      Announcement[]
  assessments        Assessment[]
  assignments        Assignment[]
  chatRooms          ChatRoom[]
  contents           Content[]
  courseAssignments  CourseAssignment[]
  courseAvailability CourseAvailability[]
  communications     CourseCommunication[]
  courseEvaluations  CourseEvaluation[]
  courseSelections   CourseSelection[]
  department         Department?           @relation(fields: [departmentId], references: [id])
  school             School?               @relation(fields: [schoolId], references: [id])
  departmentCourses  DepartmentCourse[]
  enrollments        Enrollment[]
  feedbackForms      FeedbackForm[]
  feedbacks          Feedback[]
  forumCategories    ForumCategory[]
  questions          Question[]
  quizzes            Quiz[]
  results            Result[]
  virtualClasses     VirtualClass[]

  @@map("courses")
}

model DepartmentCourse {
  id           String     @id @default(cuid())
  departmentId String
  courseId     String
  isRequired   Boolean    @default(true)
  createdAt    DateTime   @default(now())
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([departmentId, courseId])
  @@map("department_courses")
}

model CourseAvailability {
  id            String          @id @default(cuid())
  departmentId  String
  courseId      String
  isAvailable   Boolean         @default(true)
  isRecommended Boolean         @default(false)
  priority      Int             @default(50)
  notes         String?
  configuredBy  String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  admin         DepartmentAdmin @relation(fields: [configuredBy], references: [id], onDelete: Cascade)
  course        Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  department    Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([departmentId, courseId])
  @@map("course_availability")
}

model CourseAssignment {
  id                String          @id @default(cuid())
  courseId          String
  lecturerId        String
  departmentAdminId String
  academicYear      String
  semester          SemesterType
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  course            Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  departmentAdmin   DepartmentAdmin @relation(fields: [departmentAdminId], references: [id], onDelete: Cascade)
  lecturer          Lecturer        @relation(fields: [lecturerId], references: [id], onDelete: Cascade)

  @@unique([courseId, lecturerId, academicYear, semester])
  @@map("course_assignments")
}

model CourseRegistration {
  id              String                   @id @default(cuid())
  studentId       String
  academicYear    String
  semester        SemesterType
  status          CourseRegistrationStatus @default(PENDING)
  submittedAt     DateTime                 @default(now())
  reviewedAt      DateTime?
  comments        String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  reviewedById    String?
  schoolAdminId   String?
  reviewedBy      DepartmentAdmin?         @relation("ReviewedRegistrations", fields: [reviewedById], references: [id])
  SchoolAdmin     SchoolAdmin?             @relation(fields: [schoolAdminId], references: [id])
  student         Student                  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  selectedCourses CourseSelection[]
  enrollments     Enrollment[]

  @@unique([studentId, academicYear, semester])
  @@map("course_registrations")
}

model CourseSelection {
  id                   String             @id @default(cuid())
  courseRegistrationId String
  courseId             String
  createdAt            DateTime           @default(now())
  course               Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseRegistration   CourseRegistration @relation(fields: [courseRegistrationId], references: [id], onDelete: Cascade)

  @@unique([courseRegistrationId, courseId])
  @@map("course_selections")
}

model Enrollment {
  id                   String              @id @default(cuid())
  studentId            String
  courseId             String
  academicYear         String
  semester             SemesterType
  enrolledAt           DateTime            @default(now())
  isActive             Boolean             @default(true)
  courseRegistrationId String?
  course               Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseRegistration   CourseRegistration? @relation(fields: [courseRegistrationId], references: [id])
  student              Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, academicYear, semester])
  @@map("enrollments")
}

model Assessment {
  id           String       @id @default(cuid())
  studentId    String
  courseId     String
  lecturerId   String
  academicYear String
  semester     SemesterType
  caScore      Float?       @default(0)
  examScore    Float?       @default(0)
  totalScore   Float?       @default(0)
  grade        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecturer     Lecturer     @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, academicYear, semester])
  @@map("assessments")
}

model Result {
  id           String           @id @default(cuid())
  studentId    String
  courseId     String
  academicYear String
  semester     SemesterType
  caScore      Float
  examScore    Float
  totalScore   Float
  grade        String
  status       ResultStatus     @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  approvals    ResultApproval[]
  course       Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student      Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, academicYear, semester])
  @@map("results")
}

model ResultApproval {
  id                String           @id @default(cuid())
  resultId          String
  level             UserRole
  status            ResultStatus
  comments          String?
  createdAt         DateTime         @default(now())
  departmentAdminId String?
  senateAdminId     String?
  schoolAdminId     String?
  departmentAdmin   DepartmentAdmin? @relation(fields: [departmentAdminId], references: [id])
  result            Result           @relation(fields: [resultId], references: [id], onDelete: Cascade)
  schoolAdmin       SchoolAdmin?     @relation(fields: [schoolAdminId], references: [id])
  senateAdmin       SenateAdmin?     @relation(fields: [senateAdminId], references: [id])

  @@unique([resultId, level])
  @@map("result_approvals")
}

model Content {
  id            String       @id @default(cuid())
  courseId      String
  title         String
  description   String?
  fileUrl       String?
  fileName      String?
  fileSize      Int?
  fileType      String?
  mimeType      String?
  documentType  DocumentType @default(OTHER)
  week          Int?
  topic         String?
  tags          String[]
  isActive      Boolean      @default(true)
  downloadCount Int          @default(0)
  uploadedAt    DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  course        Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([documentType])
  @@index([week])
  @@index([uploadedAt])
  @@index([tags])
  @@map("contents")
}

model ChatRoom {
  id           String            @id @default(cuid())
  name         String
  description  String?
  type         ChatRoomType
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  courseId     String?
  participants ChatParticipant[]
  course       Course?           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@index([type])
  @@index([courseId])
  @@map("chat_rooms")
}

model ChatParticipant {
  id         String    @id @default(cuid())
  chatRoomId String
  userId     String
  joinedAt   DateTime  @default(now())
  lastReadAt DateTime?
  isActive   Boolean   @default(true)
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatRoomId, userId])
  @@index([userId])
  @@map("chat_participants")
}

model Message {
  id              String      @id @default(cuid())
  chatRoomId      String
  senderId        String
  content         String
  messageType     MessageType @default(TEXT)
  fileUrl         String?
  fileName        String?
  isEdited        Boolean     @default(false)
  isDeleted       Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  parentMessageId String?
  chatRoom        ChatRoom    @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  parentMessage   Message?    @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies         Message[]   @relation("MessageReplies")
  sender          User        @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatRoomId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
}

model VirtualClass {
  id              String                   @id @default(cuid())
  courseId        String
  lecturerId      String
  title           String
  description     String?
  meetingUrl      String
  meetingId       String?
  passcode        String?
  scheduledAt     DateTime
  duration        Int
  isRecorded      Boolean                  @default(false)
  recordingUrl    String?
  isActive        Boolean                  @default(true)
  maxParticipants Int?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  attendances     VirtualClassAttendance[]
  course          Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecturer        Lecturer                 @relation(fields: [lecturerId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([lecturerId])
  @@index([scheduledAt])
  @@map("virtual_classes")
}

model VirtualClassAttendance {
  id             String       @id @default(cuid())
  virtualClassId String
  studentId      String
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  duration       Int?
  student        Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  virtualClass   VirtualClass @relation(fields: [virtualClassId], references: [id], onDelete: Cascade)

  @@unique([virtualClassId, studentId])
  @@index([studentId])
  @@map("virtual_class_attendances")
}

model Notification {
  id         String           @id @default(cuid())
  title      String
  message    String
  type       NotificationType
  isRead     Boolean          @default(false)
  priority   String           @default("normal")
  actionUrl  String?
  metadata   Json?
  createdAt  DateTime         @default(now())
  expiresAt  DateTime?
  studentId  String?
  lecturerId String?
  lecturer   Lecturer?        @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  student    Student?         @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([lecturerId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("notifications")
}

model SupportTicket {
  id           String            @id @default(cuid())
  ticketNumber String            @unique
  userId       String
  title        String
  description  String
  category     String
  priority     TicketPriority    @default(MEDIUM)
  status       TicketStatus      @default(OPEN)
  assignedToId String?
  resolvedAt   DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  responses    SupportResponse[]
  assignedTo   User?             @relation("AssignedTickets", fields: [assignedToId], references: [id])
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([createdAt])
  @@map("support_tickets")
}

model SupportResponse {
  id         String        @id @default(cuid())
  ticketId   String
  userId     String
  message    String
  isInternal Boolean       @default(false)
  createdAt  DateTime      @default(now())
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@map("support_responses")
}

model FAQ {
  id          String   @id @default(cuid())
  question    String
  answer      String
  category    String
  viewCount   Int      @default(0)
  helpful     Int      @default(0)
  notHelpful  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(true)
  order       Int      @default(0)
  tags        String[] @default([])

  @@index([category])
  @@index([isPublished])
  @@map("faqs")
}

model SystemLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String?
  entityId  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([createdAt])
  @@map("system_logs")
}

model UserSession {
  id        String        @id @default(cuid())
  userId    String
  token     String        @unique
  status    SessionStatus @default(ACTIVE)
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("user_sessions")
}

model Assignment {
  id                  String                 @id @default(cuid())
  courseId            String
  lecturerId          String
  title               String
  description         String
  instructions        String?
  maxPoints           Float                  @default(100)
  dueDate             DateTime
  allowLateSubmission Boolean                @default(false)
  latePenalty         Float?
  status              AssignmentStatus       @default(DRAFT)
  fileUrl             String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  submissions         AssignmentSubmission[]
  course              Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecturer            Lecturer               @relation(fields: [lecturerId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([lecturerId])
  @@index([dueDate])
  @@index([status])
  @@map("assignments")
}

model AssignmentSubmission {
  id           String     @id @default(cuid())
  assignmentId String
  studentId    String
  fileUrl      String?
  textContent  String?
  submittedAt  DateTime   @default(now())
  isLate       Boolean    @default(false)
  score        Float?
  feedback     String?
  gradedAt     DateTime?
  gradedById   String?
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@index([studentId])
  @@index([submittedAt])
  @@map("assignment_submissions")
}

model Quiz {
  id           String         @id @default(cuid())
  courseId     String
  lecturerId   String
  title        String
  description  String?
  type         QuizType       @default(PRACTICE)
  totalPoints  Float          @default(100)
  timeLimit    Int?
  attempts     Int            @default(1)
  startDate    DateTime
  endDate      DateTime
  isRandomized Boolean        @default(false)
  showResults  Boolean        @default(true)
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  quizAttempts QuizAttempt[]
  questions    QuizQuestion[]
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecturer     Lecturer       @relation(fields: [lecturerId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([lecturerId])
  @@index([startDate])
  @@index([endDate])
  @@map("quizzes")
}

model QuizQuestion {
  id            String       @id @default(cuid())
  quizId        String
  question      String
  type          QuestionType
  points        Float        @default(1)
  options       Json?
  correctAnswer String
  explanation   String?
  order         Int
  createdAt     DateTime     @default(now())
  answers       QuizAnswer[]
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@map("quiz_questions")
}

model QuizAttempt {
  id            String       @id @default(cuid())
  quizId        String
  studentId     String
  attemptNumber Int
  startedAt     DateTime     @default(now())
  submittedAt   DateTime?
  score         Float?
  totalPoints   Float
  timeSpent     Int?
  isCompleted   Boolean      @default(false)
  answers       QuizAnswer[]
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student       Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([quizId, studentId, attemptNumber])
  @@index([studentId])
  @@map("quiz_attempts")
}

model QuizAnswer {
  id           String       @id @default(cuid())
  attemptId    String
  questionId   String
  answer       String
  isCorrect    Boolean      @default(false)
  pointsEarned Float        @default(0)
  attempt      QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question     QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@map("quiz_answers")
}

model SystemStats {
  id               String      @id @default(cuid())
  senateAdminId    String
  totalUsers       Int         @default(0)
  totalStudents    Int         @default(0)
  totalLecturers   Int         @default(0)
  totalCourses     Int         @default(0)
  totalEnrollments Int         @default(0)
  activeUsers      Int         @default(0)
  totalUploads     Int         @default(0)
  storageUsed      BigInt      @default(0)
  averageGrade     Float?
  date             DateTime    @default(now())
  senateAdmin      SenateAdmin @relation(fields: [senateAdminId], references: [id], onDelete: Cascade)

  @@index([date])
  @@map("system_stats")
}

model SchoolStats {
  id                String           @id @default(cuid())
  schoolAdminId     String
  schoolId          String
  totalStudents     Int              @default(0)
  totalLecturers    Int              @default(0)
  totalCourses      Int              @default(0)
  totalEnrollments  Int              @default(0)
  averageGrade      Float?
  passRate          Float?
  date              DateTime         @default(now())
  departmentAdminId String?
  DepartmentAdmin   DepartmentAdmin? @relation(fields: [departmentAdminId], references: [id])
  schoolAdmin       SchoolAdmin      @relation(fields: [schoolAdminId], references: [id], onDelete: Cascade)
  School            School           @relation(fields: [schoolId], references: [id])

  @@index([schoolId])
  @@index([date])
  @@map("school_stats")
}

model DepartmentStats {
  id                String          @id @default(cuid())
  departmentAdminId String
  departmentId      String
  totalStudents     Int             @default(0)
  totalLecturers    Int             @default(0)
  totalCourses      Int             @default(0)
  totalEnrollments  Int             @default(0)
  averageGrade      Float?
  gradeDistribution Json?
  date              DateTime        @default(now())
  departmentAdmin   DepartmentAdmin @relation(fields: [departmentAdminId], references: [id], onDelete: Cascade)

  @@index([departmentId])
  @@index([date])
  @@map("department_stats")
}

model CourseEvaluation {
  id                 String       @id @default(cuid())
  studentId          String
  courseId           String
  lecturerId         String
  academicYear       String
  semester           SemesterType
  contentQuality     Int
  teachingMethod     Int
  courseOrganization Int
  materialRelevance  Int
  overallRating      Int
  likes              String?
  improvements       String?
  additionalComments String?
  wouldRecommend     Boolean      @default(false)
  isAnonymous        Boolean      @default(true)
  submittedAt        DateTime     @default(now())
  course             Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecturer           Lecturer     @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  student            Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, academicYear, semester])
  @@index([courseId])
  @@index([lecturerId])
  @@map("course_evaluations")
}

model Announcement {
  id           String      @id @default(cuid())
  title        String
  content      String
  priority     String      @default("normal")
  isUrgent     Boolean     @default(false)
  publishedAt  DateTime    @default(now())
  expiresAt    DateTime?
  isActive     Boolean     @default(true)
  courseId     String?
  departmentId String?
  isGlobal     Boolean     @default(false)
  createdById  String
  schoolId     String?
  course       Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdBy    User        @relation(fields: [createdById], references: [id], onDelete: Cascade)
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  school       School?     @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([publishedAt])
  @@index([expiresAt])
  @@index([courseId])
  @@index([departmentId])
  @@index([schoolId])
  @@map("announcements")
}

model Feedback {
  id          String   @id @default(cuid())
  studentId   String
  courseId    String
  rating      Int
  comment     String?
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("feedbacks")
}

model ForumCategory {
  id           String        @id @default(cuid())
  name         String
  description  String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  courseId     String?
  departmentId String?
  schoolId     String?
  isGlobal     Boolean       @default(false)
  createdById  String
  course       Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdBy    User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  department   Department?   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  school       School?       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  threads      ForumThread[]

  @@index([courseId])
  @@index([departmentId])
  @@index([schoolId])
  @@map("forum_categories")
}

model ForumThread {
  id         String        @id @default(cuid())
  title      String
  content    String
  isPinned   Boolean       @default(false)
  isLocked   Boolean       @default(false)
  viewCount  Int           @default(0)
  replyCount Int           @default(0)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  categoryId String
  authorId   String
  posts      ForumPost[]
  author     User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([authorId])
  @@index([createdAt])
  @@map("forum_threads")
}

model ForumPost {
  id        String      @id @default(cuid())
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  threadId  String
  authorId  String
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  thread    ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([authorId])
  @@index([createdAt])
  @@map("forum_posts")
}

model Question {
  id         String         @id @default(cuid())
  title      String
  content    String
  isAnswered Boolean        @default(false)
  isResolved Boolean        @default(false)
  viewCount  Int            @default(0)
  upvotes    Int            @default(0)
  downvotes  Int            @default(0)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  courseId   String
  authorId   String
  answers    Answer[]
  votes      QuestionVote[]
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  course     Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([authorId])
  @@index([createdAt])
  @@map("questions")
}

model Answer {
  id         String       @id @default(cuid())
  content    String
  isAccepted Boolean      @default(false)
  upvotes    Int          @default(0)
  downvotes  Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  questionId String
  authorId   String
  votes      AnswerVote[]
  author     User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([authorId])
  @@index([createdAt])
  @@map("answers")
}

model QuestionVote {
  id         String   @id @default(cuid())
  isUpvote   Boolean
  questionId String
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId])
  @@map("question_votes")
}

model AnswerVote {
  id       String  @id @default(cuid())
  isUpvote Boolean
  answerId String
  userId   String
  answer   Answer  @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([answerId, userId])
  @@map("answer_votes")
}

model FeedbackForm {
  id          String             @id @default(cuid())
  title       String
  description String?
  type        String
  targetId    String?
  courseId    String?
  lecturerId  String?
  questions   String
  isActive    Boolean            @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  createdById String
  course      Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdBy   User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
  lecturer    Lecturer?          @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
  responses   FeedbackResponse[]

  @@index([type])
  @@index([courseId])
  @@index([lecturerId])
  @@index([isActive])
  @@map("feedback_forms")
}

model FeedbackResponse {
  id          String       @id @default(cuid())
  formId      String
  studentId   String
  responses   String
  isAnonymous Boolean      @default(true)
  submittedAt DateTime     @default(now())
  form        FeedbackForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  student     Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([formId, studentId])
  @@index([formId])
  @@index([studentId])
  @@map("feedback_responses")
}

model KnowledgeArticle {
  id              String                     @id @default(cuid())
  title           String
  content         String
  summary         String?
  category        ArticleCategory
  status          ArticleStatus              @default(DRAFT)
  tags            String[]
  viewCount       Int                        @default(0)
  helpful         Int                        @default(0)
  notHelpful      Int                        @default(0)
  isFeatured      Boolean                    @default(false)
  order           Int                        @default(0)
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  publishedAt     DateTime?
  authorId        String
  relatedArticles KnowledgeArticleRelation[] @relation("RelatedArticles")
  relatedTo       KnowledgeArticleRelation[] @relation("RelatedTo")
  author          User                       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([status])
  @@index([isFeatured])
  @@index([tags])
  @@index([publishedAt])
  @@map("knowledge_articles")
}

model KnowledgeArticleRelation {
  id        String           @id @default(cuid())
  articleId String
  relatedId String
  article   KnowledgeArticle @relation("RelatedArticles", fields: [articleId], references: [id], onDelete: Cascade)
  related   KnowledgeArticle @relation("RelatedTo", fields: [relatedId], references: [id], onDelete: Cascade)

  @@unique([articleId, relatedId])
  @@map("knowledge_article_relations")
}

model PasswordReset {
  id        String              @id @default(cuid())
  userId    String
  token     String              @unique
  status    PasswordResetStatus @default(PENDING)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime            @default(now())
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_resets")
}

model LiveChatSession {
  id            String            @id @default(cuid())
  sessionId     String            @unique
  userId        String
  agentId       String?
  status        ChatSessionStatus @default(WAITING)
  priority      String            @default("NORMAL")
  subject       String?
  startedAt     DateTime          @default(now())
  endedAt       DateTime?
  lastMessageAt DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  messages      LiveChatMessage[]
  agent         User?             @relation("AgentChatSessions", fields: [agentId], references: [id])
  user          User              @relation("ChatSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([agentId])
  @@index([status])
  @@index([startedAt])
  @@map("live_chat_sessions")
}

model LiveChatMessage {
  id        String          @id @default(cuid())
  sessionId String
  senderId  String
  content   String
  type      ChatMessageType @default(TEXT)
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  isRead    Boolean         @default(false)
  readAt    DateTime?
  createdAt DateTime        @default(now())
  sender    User            @relation("ChatMessages", fields: [senderId], references: [id], onDelete: Cascade)
  session   LiveChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([senderId])
  @@index([createdAt])
  @@map("live_chat_messages")
}

model EmailNotification {
  id           String                  @id @default(cuid())
  type         String
  subject      String
  content      String
  template     String?
  data         String?
  senderId     String
  recipientId  String
  status       EmailNotificationStatus @default(PENDING)
  scheduledAt  DateTime
  sentAt       DateTime?
  deliveredAt  DateTime?
  errorMessage String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  recipient    User                    @relation("EmailNotificationsReceived", fields: [recipientId], references: [id], onDelete: Cascade)
  sender       User                    @relation("EmailNotificationsSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([recipientId])
  @@index([status])
  @@index([scheduledAt])
  @@index([createdAt])
  @@map("email_notifications")
}

model CourseCommunication {
  id           String                @id @default(cuid())
  courseId     String
  userId       String
  type         CommunicationType
  title        String?
  content      String
  isPinned     Boolean               @default(false)
  isResolved   Boolean               @default(false)
  parentId     String?
  academicYear String
  semester     SemesterType
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  files        CommunicationFile[]
  votes        CommunicationVote[]
  course       Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
  parent       CourseCommunication?  @relation("Replies", fields: [parentId], references: [id])
  replies      CourseCommunication[] @relation("Replies")
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("course_communications")
}

model CommunicationVote {
  id              String              @id @default(cuid())
  communicationId String
  userId          String
  type            VoteType
  createdAt       DateTime            @default(now())
  communication   CourseCommunication @relation(fields: [communicationId], references: [id], onDelete: Cascade)
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communicationId, userId])
  @@map("communication_votes")
}

model CommunicationFile {
  id              String              @id @default(cuid())
  communicationId String
  fileName        String
  fileUrl         String
  fileSize        Int
  mimeType        String
  createdAt       DateTime            @default(now())
  communication   CourseCommunication @relation(fields: [communicationId], references: [id], onDelete: Cascade)

  @@map("communication_files")
}

enum UserRole {
  STUDENT
  LECTURER
  DEPARTMENT_ADMIN
  SCHOOL_ADMIN
  SENATE_ADMIN
}

enum StudentLevel {
  LEVEL_100
  LEVEL_200
  LEVEL_300
  LEVEL_400
  LEVEL_500
}

enum CourseType {
  DEPARTMENTAL
  FACULTY
  GENERAL
}

enum AssignmentStatus {
  DRAFT
  PUBLISHED
  SUBMITTED
  GRADED
  LATE_SUBMISSION
}

enum QuizType {
  PRACTICE
  GRADED
  MIDTERM
  FINAL
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  FILL_IN_BLANK
}

enum SessionStatus {
  ACTIVE
  EXPIRED
  LOGGED_OUT
}

enum GradeDistribution {
  A
  B
  C
  D
  F
  INCOMPLETE
}

enum CourseRegistrationStatus {
  PENDING
  DEPARTMENT_APPROVED
  DEPARTMENT_REJECTED
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  LINK
}

enum NotificationType {
  DEADLINE
  GRADE
  ANNOUNCEMENT
  REMINDER
  COURSE_REGISTRATION
  VIRTUAL_CLASS
  SYSTEM
}

enum DocumentType {
  LECTURE_NOTE
  ASSIGNMENT
  QUIZ
  PRESENTATION
  VIDEO
  AUDIO
  OTHER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ChatRoomType {
  COURSE_DISCUSSION
  PRIVATE_MESSAGE
  GROUP_CHAT
  QNA_BOARD
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ArticleCategory {
  GETTING_STARTED
  ACCOUNT_MANAGEMENT
  COURSE_REGISTRATION
  GRADES_AND_RESULTS
  TECHNICAL_SUPPORT
  ACADEMIC_POLICIES
  SYSTEM_GUIDES
  TROUBLESHOOTING
  OTHER
}

enum ChatSessionStatus {
  ACTIVE
  WAITING
  ENDED
  TRANSFERRED
}

enum ChatMessageType {
  TEXT
  FILE
  SYSTEM
  TYPING
}

enum PasswordResetStatus {
  PENDING
  USED
  EXPIRED
}

enum ResultStatus {
  PENDING
  DEPARTMENT_APPROVED
  FACULTY_APPROVED
  SENATE_APPROVED
  REJECTED
}

enum SemesterType {
  FIRST
  SECOND
}

enum EmailNotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
  BOUNCED
}

enum CommunicationType {
  CHAT_MESSAGE
  QUESTION
  ANSWER
  ANNOUNCEMENT
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
